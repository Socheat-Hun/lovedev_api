version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: lovedev_postgres
    environment:
      POSTGRES_DB: lovedev_db
      POSTGRES_USER: lovedev_user
      POSTGRES_PASSWORD: lovedev_pass123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - lovedev_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lovedev_user -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: lovedev_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - lovedev_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    command: redis-server --appendonly yes

  # MailHog (Email testing)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: lovedev_mailhog
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - lovedev_network
    restart: unless-stopped

  # Spring Boot Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: lovedev_api
    environment:
      # Spring Profile
      SPRING_PROFILES_ACTIVE: prod

      # Database
      DATABASE_URL: jdbc:postgresql://postgres:5432/lovedev_db
      DATABASE_USERNAME: lovedev_user
      DATABASE_PASSWORD: lovedev_pass123

      # JWT
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-min-256-bits-long-change-in-production}

      # Redis
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379

      # Email
      MAIL_HOST: mailhog
      MAIL_PORT: 1025
      EMAIL_FROM: ${EMAIL_FROM:-noreply@lovedev.com}
      EMAIL_FROM_NAME: ${EMAIL_FROM_NAME:-LoveDev Team}
      EMAIL_VERIFICATION_URL: ${EMAIL_VERIFICATION_URL:-http://localhost:8080/api/v1/auth/verify-email}
      EMAIL_RESET_PASSWORD_URL: ${EMAIL_RESET_PASSWORD_URL:-http://localhost:3000/reset-password}

      # OAuth2 - Google
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}

      # OAuth2 - GitHub
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET}

      # OAuth2 Redirect
      OAUTH2_REDIRECT_URI: ${OAUTH2_REDIRECT_URI:-http://localhost:3000/oauth2/redirect}

    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mailhog:
        condition: service_started
    networks:
      - lovedev_network
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_uploads:
    driver: local
  app_logs:
    driver: local

networks:
  lovedev_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16