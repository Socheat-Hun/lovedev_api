# Production Environment Configuration
spring:

  config:
    import: optional:file:.env[.properties]

  datasource:
    url: ${DATABASE_URL}
    username: ${DATABASE_USERNAME}
    password: ${DATABASE_PASSWORD}
    hikari:
      maximum-pool-size: 10
      minimum-idle: 5

  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        format_sql: false
        use_sql_comments: false
    open-in-view: false

  flyway:
    enabled: true
    baseline-on-migrate: true
    locations: classpath:db/migration

  data:
    redis:
      host: ${SPRING_DATA_REDIS_HOST:redis}
      port: ${SPRING_DATA_REDIS_PORT:6379}

  mail:
    default-encoding: UTF-8
    host: ${MAIL_HOST}
    port: ${MAIL_PORT}
    username: ${MAIL_USERNAME:}
    password: ${MAIL_PASSWORD:}
    properties:
      mail:
        smtp:
          auth: ${MAIL_SMTP_AUTH:false}
          starttls:
            enable: ${MAIL_SMTP_STARTTLS:false}
          connectiontimeout: 5000
          timeout: 5000
          writetimeout: 5000

  # OAuth2 Configuration
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope:
              - openid
              - email
              - profile
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            client-name: Google

          github:
            client-id: ${GITHUB_CLIENT_ID:not-set}
            client-secret: ${GITHUB_CLIENT_SECRET:not-set}
            scope:
              - user:email
              - read:user
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            client-name: GitHub

        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/v2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
            user-name-attribute: sub

          github:
            authorization-uri: https://github.com/login/oauth/authorize
            token-uri: https://github.com/login/oauth/access_token
            user-info-uri: https://api.github.com/user
            user-name-attribute: id

# Application Configuration
app:
  jwt:
    secret: ${JWT_SECRET}
    expiration: 900000 # 15 minutes
    refresh-expiration: 604800000 # 7 days

  oauth2:
    redirect-uri: ${OAUTH2_REDIRECT_URI:http://localhost:3000/oauth2/redirect}

  cors:
    allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:4200}
    allowed-methods: GET,POST,PUT,DELETE,OPTIONS
    allowed-headers: "*"
    allow-credentials: true

  file:
    upload-dir: ${FILE_UPLOAD_DIR:/app/uploads}
    max-size: 10485760 # 10MB

  email:
    from: ${EMAIL_FROM}
    from-name: ${EMAIL_FROM_NAME}
    enabled: true
    verification-url: ${EMAIL_VERIFICATION_URL}
    reset-password-url: ${EMAIL_RESET_PASSWORD_URL}

# Logging for Production
logging:
  level:
    root: INFO
    com.lovedev.api: INFO
    org.springframework.web: WARN
    org.springframework.security: WARN
    org.hibernate.SQL: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
  file:
    name: /app/logs/lovedev-api.log
    max-size: 10MB
    max-history: 30

server:
  port: 8080
  error:
    include-message: always
    include-binding-errors: never
    include-stacktrace: never
    include-exception: false
  compression:
    enabled: true

# Actuator for Production
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: when-authorized
  health:
    redis:
      enabled: true